name: Create deploy terraform IAC

on:
  push:
    branches:
      - infra

env:
  AWS_ACCESS_KEY_ID: ${{  secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{  secrets.AWS_SECRET_ACCESS_KEY  }}
  AWS_REGION: "us-east-1"

jobs:
  plan-dev:
    name: "terraform plan dev"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
       
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7 
       
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
      
        
      - name: Terraform Init
        id: init
        run: terraform init 
        
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
        
      - uses: actions/github-script@v6
        
        env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
              <details><summary>Validation Output</summary>
        
              \`\`\`\n
              ${{ steps.validate.outputs.stdout }}
              \`\`\`
        
              </details>
        
              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        
              <details><summary>Show Plan</summary>
        
              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`
        
              </details>
        
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
        
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })